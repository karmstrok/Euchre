{"name":"Euchre Server","tagline":"Multiplayer euchre game server","body":"The goal of this project is to set up a scalable game server architecture for the card game Euchre.\r\n\r\n# Design Details\r\n## Upstream Server - Node.js\r\nAt the topmost level of the design will be a Node.js server.  There may be multiple Node.js server instances running concurrently on other machines, as well as possibly locally, which should not impact the server functionality.\r\nAt its core, a NodeJS server instance should provide the following:\r\n* Creation and control of one to many game instances.\r\n* Provide users means to join a game instance\r\n* Authenticate users attempting to join a game.\r\n* Manage game mechanics including:\r\n  * Game asset initialization\r\n  * Player input handling  (HTTP?)\r\n  * Game state status propagation between users (Push)\r\n  * Game asset release\r\n* Store game data analytics for users\r\n* Provide means for pulling historical data (probably offload query to a shared database structure between instances to start)\r\n\r\n## Reverse Proxy/Load Balancer - NGINX\r\nAs a first hop solution for supporting scalability will be an NGINX web server responsible for load balancing requests and forwarding to the upstream Node.js servers.","google":"UA-71422100-1","note":"Don't delete this file! It's used internally to help with page regeneration."}